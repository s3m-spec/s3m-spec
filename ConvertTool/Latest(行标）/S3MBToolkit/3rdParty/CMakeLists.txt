cmake_minimum_required(VERSION 3.10)
project(s3mToolkit_3rdparty)
include(ExternalProject)

set(DEFAULT_BUILD_TYPE Release -fPIC)
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.")
  set(CMAKE_BUILD_TYPE ${DEFAULT_BUILD_TYPE} CACHE STRING "Choose the type of build." FORCE)
endif()

set(DEFAULT_BUILD_TYPE Release)
set(CMAKE_BUILD_TYPE Release)

set(GIT_PROGRESS OFF)
set(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR})
set(INTERMEDIATE_DIR ${CMAKE_BINARY_DIR}/install)

set(PCRE_LIB_DIR ${THIRD_PARTY_DIR}/pcre/lib/${CMAKE_BUILD_TYPE})
set(PCRE_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/pcre
	-DBUILD_SHARED_LIBS=ON
)
ExternalProject_Add(pcre
 PREFIX pcre
 GIT_REPOSITORY https://github.com/composer/pcre.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/pcre
 CMAKE_ARGS ${PCRE_BUILD_ARGS}
 if (WIN32)
 -DBUILD_SHARED_LIBS=OFF
 else()
 -DBUILD_SHARED_LIBS=ON
 endif()
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(LIBXML2_LIB_DIR ${THIRD_PARTY_DIR}/libxml2/lib/${CMAKE_BUILD_TYPE})
set(LIBXML2_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/libxml2
	-DBUILD_SHARED_LIBS=ON
	-DLIBXML2_WITH_PYTHON=OFF
)
ExternalProject_Add(libxml2
 PREFIX libxml2
 GIT_REPOSITORY https://github.com/GNOME/libxml2.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/libxml2
 CMAKE_ARGS ${LIBXML2_BUILD_ARGS}
 if (WIN32)
 -DBUILD_SHARED_LIBS=OFF
 else()
 -DBUILD_SHARED_LIBS=ON
 endif()
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(COLLADA2GLTF_LIB_DIR ${THIRD_PARTY_DIR}/COLLADA2GLTF/lib/${CMAKE_BUILD_TYPE})
set(COLLADA2GLTF_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/COLLADA2GLTF
	-DBUILD_SHARED_LIBS=ON
)
ExternalProject_Add(COLLADA2GLTF
 PREFIX COLLADA2GLTF
 GIT_REPOSITORY https://github.com/CesiumGS/COLLADA2GLTF.git
 GIT_PROGRESS ${GIT_PROGRESS}
 CMAKE_ARGS ${COLLADA2GLTF_BUILD_ARGS}
 if (WIN32)
 -DBUILD_SHARED_LIBS=OFF
 else()
 -DBUILD_SHARED_LIBS=ON
 endif()
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

ExternalProject_Add(rapidjson
 PREFIX rapidjson
 GIT_TAG version1.1.0
 GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/rapidjson
 CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} 
 if (WIN32)
 -DBUILD_SHARED_LIBS=OFF
 else()
 -DBUILD_SHARED_LIBS=ON
 endif()
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(LIBUUID_LIB_DIR ${THIRD_PARTY_DIR}/libuuid/lib/${CMAKE_BUILD_TYPE})
set(LIBUUID_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/libuuid
	-DBUILD_SHARED_LIBS=ON
)
ExternalProject_Add(libuuid
 PREFIX libuuid
 GIT_REPOSITORY https://github.com/akemimadoka/libuuid.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/libuuid
 CMAKE_ARGS ${LIBUUID_BUILD_ARGS}
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(TINYXML2_LIB_DIR ${THIRD_PARTY_DIR}/tinyxml2/lib/${CMAKE_BUILD_TYPE})
set(TINYXML2_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/tinyxml2
	-DBUILD_SHARED_LIBS=ON
)
ExternalProject_Add(tinyxml2
 PREFIX tinyxml2
 GIT_REPOSITORY https://github.com/leethomason/tinyxml2.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/tinyxml2
 CMAKE_ARGS ${TINYXML2_BUILD_ARGS}
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(OPENSCENEGRAPH_LIB_DIR ${THIRD_PARTY_DIR}/openscenegraph/lib/${CMAKE_BUILD_TYPE})
set(OPENSCENEGRAPH_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/openscenegraph
	-DBUILD_SHARED_LIBS=ON
)
ExternalProject_Add(openscenegraph
 PREFIX openscenegraph
 GIT_REPOSITORY https://github.com/openscenegraph/OpenSceneGraph.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/opnescenegraph
 CMAKE_ARGS ${OPENSCENEGRAPH_BUILD_ARGS}
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(S3M_LIB_DIR ${THIRD_PARTY_DIR}/s3m/lib/${CMAKE_BUILD_TYPE})
set(S3M_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/s3m
	-DBUILD_SHARED_LIBS=ON
)
ExternalProject_Add(s3m
 PREFIX s3m
 GIT_REPOSITORY https://github.com/SuperMap/s3m-spec.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/s3m
 CMAKE_ARGS ${S3M_BUILD_ARGS}
 if (WIN32)
 -DBUILD_SHARED_LIBS=OFF
 else()
 -DBUILD_SHARED_LIBS=ON
 endif()
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

add_custom_target(3rdParty)
add_dependencies(3rdParty libuuid libxml2 COLLADA2GLTF)
