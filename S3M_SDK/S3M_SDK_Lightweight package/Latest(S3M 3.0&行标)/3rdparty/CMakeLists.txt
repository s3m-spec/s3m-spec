cmake_minimum_required(VERSION 3.10)

include(ExternalProject)

set(DEFAULT_BUILD_TYPE Release)
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.")
  set(CMAKE_BUILD_TYPE ${DEFAULT_BUILD_TYPE} CACHE STRING "Choose the type of build." FORCE)
endif()

set(DEFAULT_BUILD_TYPE Release)
set(CMAKE_BUILD_TYPE Release)

set(GIT_PROGRESS OFF)
set(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR})
set(INTERMEDIATE_DIR ${CMAKE_BINARY_DIR}/install)

set(ZLIB_LIB_DIR ${THIRD_PARTY_DIR}/zlib/lib/x64/${CMAKE_BUILD_TYPE})

ExternalProject_Add(zlib
	PREFIX zlib
	GIT_REPOSITORY https://github.com/madler/zlib.git
	GIT_PROGRESS ${GIT_PROGRESS}
	INSTALL_DIR ${THIRD_PARTY_DIR}/zlib
	CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DINSTALL_INC_DIR=${THIRD_PARTY_DIR}/zlib/include -DINSTALL_BIN_DIR=${ZLIB_LIB_DIR} -DINSTALL_LIB_DIR=${ZLIB_LIB_DIR} -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)


set(LIBJPEG_LIB_DIR ${THIRD_PARTY_DIR}/libjpeg/lib/x64/${CMAKE_BUILD_TYPE})

ExternalProject_Add(libjpeg
 PREFIX libjpeg
 GIT_REPOSITORY https://github.com/libjpeg-turbo/libjpeg-turbo.git
 GIT_PROGRESS ${GIT_PROGRESS}
 GIT_TAG main
 INSTALL_DIR ${THIRD_PARTY_DIR}/libjpeg
 CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DWITH_TURBOJPEG=OFF -DCMAKE_INSTALL_BINDIR=${LIBJPEG_LIB_DIR} -DCMAKE_INSTALL_LIBDIR=${LIBJPEG_LIB_DIR} -DCMAKE_INSTALL_INCLUDEDIR=${THIRD_PARTY_DIR}/libjpeg/include -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

set(LIBPNG_LIB_DIR ${THIRD_PARTY_DIR}/libpng/lib/x64/${CMAKE_BUILD_TYPE})
set(LIBPNG_BUILD_ARGS
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/libpng
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DZLIB_ROOT=${ZLIB_LIB_DIR}
	if (WIN32)
	-DBUILD_SHARED_LIBS=OFF
	else()
	-DBUILD_SHARED_LIBS=ON
	endif()
	-DPNG_TESTS=OFF
	-Wno-dev
	-DZLIB_INCLUDE_DIR=${THIRD_PARTY_DIR}/zlib/include
	-DCMAKE_INSTALL_INCLUDEDIR=${THIRD_PARTY_DIR}/libpng/include
	-DCMAKE_INSTALL_BINDIR=${LIBPNG_LIB_DIR}
	-DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)
ExternalProject_Add(libpng
  PREFIX libpng
  DEPENDS zlib
  GIT_REPOSITORY https://github.com/glennrp/libpng.git
  GIT_PROGRESS ${GIT_PROGRESS}
  INSTALL_DIR ${THIRD_PARTY_DIR}/libpng
 CMAKE_ARGS ${LIBPNG_BUILD_ARGS}
)

set(LIBJSONCPP_LIB_DIR ${THIRD_PARTY_DIR}/jsoncpp/lib/x64/${CMAKE_BUILD_TYPE})
set(LIBJSONCPP_BUILD_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	-DCMAKE_INSTALL_INCLUDEDIR=${THIRD_PARTY_DIR}/jsoncpp/include
	-DCMAKE_INSTALL_LIBDIR=${LIBJSONCPP_LIB_DIR}
	-DCMAKE_INSTALL_BINDIR=${LIBJSONCPP_LIB_DIR}
	-DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
	-DJSONCPP_WITH_TESTS=OFF
	-DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF
	#-DJSONCPP_WITH_PKGCONFIG_SUPPORT=OFF
	#-DJSONCPP_WITH_CMAKE_PACKAGE=OFF
	if (WIN32)
	-DBUILD_SHARED_LIBS=OFF 
	else()
	-DBUILD_SHARED_LIBS=ON
	endif()
	-DBUILD_OBJECT_LIBS=OFF 
	-DBUILD_STATIC_LIBS=ON
)

ExternalProject_Add(jsoncpp
 PREFIX jsoncpp
 GIT_REPOSITORY https://github.com/open-source-parsers/jsoncpp.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/jsoncpp
 CMAKE_ARGS ${LIBJSONCPP_BUILD_ARGS}
)

set(LIBSQUISH_LIB_DIR ${THIRD_PARTY_DIR}/libsquish/lib/x64/${CMAKE_BUILD_TYPE})
set(LIBSQUISH_BUILD_ARGS
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} 
	-DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
	-DCMAKE_INSTALL_PREFIX=${THIRD_PARTY_DIR}/libsquish
	-DBUILD_SHARED_LIBS=ON
)

ExternalProject_Add(libsquish
 PREFIX libsquish
 GIT_REPOSITORY https://github.com/svn2github/libsquish.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/libsquish
 CMAKE_ARGS ${LIBSQUISH_BUILD_ARGS}
)

ExternalProject_Add(draco
 PREFIX draco
 GIT_REPOSITORY https://github.com/google/draco.git
 GIT_PROGRESS ${GIT_PROGRESS}
 INSTALL_DIR ${THIRD_PARTY_DIR}/draco
 CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} 
 if (WIN32)
 -DBUILD_SHARED_LIBS=OFF
 else()
 -DBUILD_SHARED_LIBS=ON
 endif()
 -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
)

project(s3m_3rdparty)
add_custom_target(3rdparty)
add_dependencies(3rdparty zlib libjpeg jsoncpp libsquish draco)
